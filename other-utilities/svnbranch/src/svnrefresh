#! /usr/bin/env perl

# Merges changes made in a Subversion trunk into a working copy for an
# associated branch.

# $Id: svnrefresh 3091 2007-10-01 15:27:41Z tb97327 $

################
# Use
################

# Enforce strict scoping
use strict;

# Print warnings
use warnings;

# Use getopts
use Getopt::Std;

# Use module for obtaining the current working directory
use Cwd;

# The directory containing the current program
my ($program_dir) = $0 =~ m!^(.*)/[^/]*$!;
if (!$program_dir) {
    $program_dir = ".";
}

# Load utilities
require "$program_dir/svnmergeutil.pl";

################
# Variables
################

# Subversion ID for this revision
my $id ='$Id: svnrefresh 3091 2007-10-01 15:27:41Z tb97327 $';

# Usage message
my $usage = "Usage: " . escape($0) .
    " [-fhnpv] [-i rev] [TRUNK_URL_OR_DIRECTORY]
Options:
  -f                    : Force
  -h                    : Help
  -i rev                : Initialize refreshed revision
  -p                    : Print last refreshed revision
  -n                    : Dry run
  -v                    : Verbose
Environment variables:
  SVNDIR                : Directory containing Subversion executables";

# Help message
my $help = "Merges changes made in a Subversion trunk into a working
copy for an associated branch in the current directory.  Does nothing if
no changes have been made to the trunk since that revision.

The current directory should be the top level directory of a working
copy for a Subversion branch.

If specified, the argument should be the repository URL, or the pathname
of a working copy, for the top level directory of the trunk associated
with the branch.  If not specified, the URL of the trunk will be
computed and the trunk will be accessed through the repository.  A
pathname argument is permitted to contain spaces, which should be
escaped or quoted.  Trunk URLs should end in '/trunk', branch URLs
should end in '/branches/BRANCHNAME'.  A branch and a trunk are related
if the portions of their URLs to the left of these endings are the same.

If the -f option is specified, forces the refresh to proceed even if the
branch working copy contains modifications.

If the -h option is specified, prints this help message and exits.

If the -i option is specified, the option value specifies the revision
to which this branch has already been refreshed.  The command sets
information in the working copy to specify that refreshed revision and
exits.  Use this option to note refreshes that have been performed
without using this utility.

If the -n option is specified, prints information about the operations
that would be carried out if the commands were actually run.  Also
prints information about whether the branch working copy is modified or
needs to be updated.

If the -p option is specified, prints the revision the branch is
currently refreshed to.  It is an error to specify both the -i and -p
options.

If the -v option is specified, also prints the log entries for the
changes made in the trunk, and the diffs for the changes.

If the SVNDIR environment variable is set to a non-empty value, uses the
Subversion executables located in that directory.  Otherwise, uses the
executables available in the current path.

Exits with a non-zero status if:
- The current directory is not the top level directory of a working copy
  for a branch
- The branch working copy is modified, or needs to be updated, and
  neither -f or -n flag is not specified
- The trunk argument is specified and is not a repository URL or working
  copy pathname for the top level directory of the trunk
- The trunk argument specifies a working copy that contains
  modifications or needs to be updated
- The branch and trunk are not associated

$id";

# The trunk argument, or the URL derived from the branch
my $trunk = "";

# The URL for the trunk
my $trunk_url;

# The current revision of the trunk
my $trunk_rev;

# The URL for the branch
my $branch_url;

# The current revision of the branch
my $branch_rev;

# The name of the branch
my $branch_name;

# The trunk revision last refreshed into the branch
my $refreshed;

# The branch revision last merged into the trunk or zero if it has not
# been merged
my $merged;

# The command used for printing the log for changes to refresh from the
# trunk.
my $log_command;

# The contents of the log of changes to refresh from the trunk.
my @log_contents;

# Declare global flags for options
our($opt_f, $opt_h, $opt_i, $opt_n, $opt_p, $opt_v);

# Use variables defined in svnmergeutil.pl.
our($svn);

################
# Main subroutines
################

# Call main subroutine
main();

# Main subroutine
sub main {
    check_svn_version();
    check_arguments();
    check_branch_and_trunk();
    handle_opt_ip();
    check_refreshed();
    check_moves();
    merge();
}

# Checks the command line arguments, sets the $opt_X variables, and sets
# $trunk.
sub check_arguments {
    if (getopts("fhi:npv")) {
	if ($opt_h) {
	    print "$usage\n";
	    print "$help\n";
	    exit 0;
	} elsif ($opt_i) {
	    if ($opt_i !~ /^\d+$/) {
		die "Error: Bad value for -i: $opt_i\n$usage\n";
	    } elsif ($opt_p) {
		die "Error: -p not permitted with -i\n$usage\n";
	    }
	}
	if ($#ARGV == 0) {
	    $trunk = shift(@ARGV);
	    return;
	} elsif ($#ARGV < 0) {
	    return;
	}
    }
    die "$usage\n";
}

# Checks that the branch and trunk are valid.
sub check_branch_and_trunk {
    # Check branch URL
    $branch_url = get_wc_url(cwd());
    if ($branch_url !~ m!^(.*)/branches/([^/]+)$!) {
	die "Error: Current directory not top of branch: " . `pwd`;
    }
    my $branch_base = $1;
    $branch_name = $2;
    # Check trunk URL
    if (!$trunk) {
	$trunk = "$branch_base/trunk";
    }
    if (is_repository_url($trunk)) { # The argument is a repository URL
	$trunk_url = $trunk;
    } else {			# A working copy -- get its URL
	$trunk_url = get_wc_url($trunk);
    }
    if ($trunk_url !~ m!^(.*)/trunk/?$!) {
	die "Error: Argument not top of trunk: $trunk\n";
    }
    my $trunk_base = $1;
    if ($branch_base ne $trunk_base) {
	die "Error: Branch and trunk not related: " . cwd() . ", $trunk\n";
    }
    # Check trunk
    $trunk_rev = get_url_revision($trunk_url);
    if (!$trunk_rev) {
	die "Error: Trunk URL not found\n";
    } elsif ($trunk ne $trunk_url) {
	# Check for modifications and updates in the trunk working copy
	my $result = get_update_modified($trunk, 1);
	if ($result) {
	    die "Error: Trunk working copy $result: $trunk\n";
	}
    }
    # Check branch
    $branch_rev = get_url_revision($branch_url);
    if (!$branch_rev) {
	die "Error: Branch URL not found\n";
    }
    my $result = get_update_modified(cwd(), !$opt_f);
    if ($result) {
	warn_or_die($opt_n, "Branch working copy $result: " . `pwd`);
    }
}

# Handle the -i and -p options, if specified.
sub handle_opt_ip {
    if ($opt_i) {
	if ($opt_n) {
	    print "Would mark branch refreshed to revision $opt_i\n";
	} else {
	    set_refreshed(cwd(), $opt_i, $branch_name);
	    print "Set branch refreshed to revision $opt_i\n";
	}
	exit 0;
    } elsif ($opt_p) {
	my $refreshed = get_refreshed(cwd(), $branch_name, $branch_rev);
	print "$refreshed\n";
	exit 0;
    }
}

# Determine when this branch was last refreshed, and exit if it is up to
# date with the trunk.  Also sets $merged .
sub check_refreshed {
    $refreshed = get_refreshed(cwd(), $branch_name, $branch_rev);
    if ($trunk_rev <= $refreshed) {
	print "Branch working copy is up to date with trunk revision " .
	    "$refreshed\n";
	exit 0;
    }
    $merged = get_merged_up($trunk, $branch_name) || 0;
}

# Checks the log for moves, printing out what it finds and exiting if
# needed.
sub check_moves {
    # The revision numbers specified when printing the log include the
    # log for changes specified by the first number, not the changes
    # made since that number as in printing the diffs.
    my $log_start = $refreshed + 1;
    $log_command = "$svn log -v -r $log_start:$trunk_rev " . escape($trunk);
    @log_contents = command($log_command);
    my $moves = get_moves($trunk_url, @log_contents);
    if ($moves) {
	warn "Warning: Trunk changes contain moves:\n$moves";
    }
    # Check for moves in the branch not reflected in the trunk
    my $created = get_branch_first_revision(cwd(), $branch_rev);
    if ($merged > $created) {
	$log_start = $merged + 1;
    } else {
	$log_start = $created + 1;
    }
    if ($log_start < $branch_rev) {
	$moves = get_moves(
	    $branch_url, command("$svn log -v -r $log_start:$branch_rev ."));
	if ($moves) {
	    warn "Warning: Branch changes contain moves:\n$moves";
	}
    }
}

# Performs the merge, and prints the log and diffs as needed.
sub merge {
    my $merge;
    if ($opt_n) {
	$merge = "$svn merge --dry-run";
    } else {
	$merge = "$svn merge --accept postpone";
    }
    my $old = ($merged > $refreshed)
	? cwd() . "\@$merged" : escape($trunk) . "\@$refreshed";
    my $new = escape($trunk) . "\@$trunk_rev";
    my $merge_command = "$merge $old $new";
    print "$merge_command\n";
    my @merge_results = command($merge_command);
    print @merge_results;
    if (!$opt_n) {
	# Update meta data
	set_refreshed(cwd(), $trunk_rev, $branch_name);
    }
    # Print log and diffs in verbose mode
    if ($opt_v) {
	print "------------------------------------" .
	    "------------------------------------\n";
	print "$log_command\n";
	print @log_contents;
	my $diff_command = "$svn diff --notice-ancestry --old $old --new $new";
	print "$diff_command\n";
	print command($diff_command);
    }
    if (!$opt_n) {
	# Check for conflicts
	print_conflicts(@merge_results);
	# Print what happened
	print "Refreshed working copy for branch $branch_name " .
	    "to trunk revision $trunk_rev\n";
    }
    exit 0;
}

# Check the output from a merge and print information about conflicts.
sub print_conflicts {
    my (@merge_results) = @_;
    my $found_conflict = 0;
    for my $line (@merge_results) {
	if ($line =~ /^C/) {
	    if (!$found_conflict) {
		$found_conflict = 1;
		print("The refresh produced merge conflicts:\n");
	    }
	    print $line;
	}
    }
}
