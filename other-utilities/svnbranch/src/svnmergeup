#! /usr/bin/env perl

# Merges changes made in a Subversion branch into a working copy for the
# associated trunk.

# $Id: svnmergeup 3091 2007-10-01 15:27:41Z tb97327 $

################
# Use
################

# Enforce strict scoping
use strict;

# Print warnings
use warnings;

# Use getopts
use Getopt::Std;

# Use module for obtaining the current working directory
use Cwd;

# The directory containing the current program
my ($program_dir) = $0 =~ m!^(.*)/[^/]*$!;
if (!$program_dir) {
    $program_dir = ".";
}

# Load utilities
require "$program_dir/svnmergeutil.pl";

################
# Variables
################

# Subversion ID for this revision
my $id ='$Id: svnmergeup 3091 2007-10-01 15:27:41Z tb97327 $';

# Usage message
my $usage = "Usage: " . escape($0) .
    " [-fhnpv] [-i rev] BRANCH_URL_OR_DIRECTORY
Options:
  -f                    : Force
  -h                    : Help
  -i rev                : Initialize merged up revision
  -p                    : Print last merged up revision
  -n                    : Dry run
  -v                    : Verbose
Environment variables:
  SVNDIR                : Directory containing Subversion executables";

# Help message
my $help = "Merges changes made in a Subversion branch into a working
copy for the associated trunk in the current directory.  Does nothing if
no changes have been made to the branch since it was last merged up or
since the branch was created.

The current directory should be the top level directory of a working
copy for a Subversion trunk.

The argument should be the repository URL, or the pathname of a working
copy, for the top level directory of a branch associated with the trunk.
A pathname argument is permitted to contain spaces, which should be
escaped or quoted.  Trunk URLs should end in '/trunk', branch URLs
should end in '/branches/BRANCHNAME'.  A branch and a trunk are related
if the portions of their URLs to the left of these endings are the same.

If the -f option is specified, forces the merge up to proceed even if
the trunk working copy contains modifications.

If the -h option is specified, prints this help message and exits.

If the -i option is specified, the option value specifies the revision
to which the branch has already been merged up to the trunk.  The
command sets information in the working copy to specify that merged up
revision and exits.  Use this option to note merges that have been
performed without using this utility.

If the -n option is specified, prints information about the operations
that would be carried out if the commands were actually run.  Also
prints information about whether the branch needs be refreshed from the
trunk, and whether the branch working copy is modified or needs to be
updated.

If the -p option is specified, prints the revision the branch is
currently merged up to in the trunk.  It is an error to specify both the
-i and -p options.

If the -v option is specified, also prints the log entries for the
changes made in the branch, and the diffs for the changes.

If the SVNDIR environment variable is set to a non-empty value, uses the
Subversion executables located in that directory.  Otherwise, uses the
executables available in the current path.

Exits with a non-zero status if:
- The current directory is not the top level directory of a working copy
  for a trunk
- The trunk working copy needs to be updated
- The trunk working copy contains modifications and the -f flag is not
  specified
- The branch argument is not a repository URL or working copy pathname
  for the top level directory of a branch
- The branch argument specifies a working copy that contains
  modifications, or needs to be updated, and the -n flag is not
  specified
- The branch argument specifies a repository URL for a non-existent
  branch
- The branch needs to be refreshed from the trunk and the -n flag is not
  specified
- The branch and trunk are not associated

$id";

# The branch argument
my $branch;

# The URL for the branch
my $branch_url;

# The current revision of the branch
my $branch_rev;

# The name of the branch
my $branch_name;

# The URL for the trunk
my $trunk_url;

# The current revision of the trunk
my $trunk_rev;

# The trunk revision last refreshed to the branch
my $refreshed;

# The branch revision last merged up into the branch
my $merged;

# The command used for printing the log for changes to refresh from the
# trunk.
my $log_command;

# The contents of the log of changes to refresh from the trunk.
my @log_contents;

# Declare global flags for options
our($opt_f, $opt_h, $opt_i, $opt_n, $opt_p, $opt_v);

# Use variables defined in svnmergeutil.pl.
our($svn);

################
# Main subroutines
################

# Call main subroutine
main();

# Main subroutine
sub main {
    check_svn_version();
    check_arguments();
    check_branch_and_trunk();
    handle_opt_ip();
    check_merged();
    check_refreshed();
    check_moves();
    merge();
}

# Checks the command line arguments, sets the $opt_X variables, and sets
# $branch.
sub check_arguments {
    if (getopts("fhi:npv")) {
	if ($opt_h) {
	    print "$usage\n";
	    print "$help\n";
	    exit 0;
	} elsif ($opt_i) {
	    if ($opt_i !~ /^\d+$/) {
		die "Error: Bad value for -i: $opt_i\n$usage\n";
	    } elsif ($opt_p) {
		die "Error: -p not permitted with -i\n$usage\n";
	    }
	}
	if ($#ARGV == 0) {
	    $branch = shift(@ARGV);
	    return;
	}
    }
    die "$usage\n";
}

# Checks that the branch and trunk are valid.
sub check_branch_and_trunk {
    # Check trunk URL
    $trunk_url = get_wc_url(cwd());
    if ($trunk_url !~ m!^(.*)/trunk$!) {
	die "Error: Current directory not top of trunk: " . `pwd`;
    }
    my $trunk_base = $1;
    # Check branch URL
    if (is_repository_url($branch)) { # The argument is a repository URL
	$branch_url = $branch;
    } else {			# A working copy -- get its URL
	$branch_url = get_wc_url($branch);
    }
    if ($branch_url !~ m!^(.*)/branches/([^/]+)/?$!) {
	die "Error: Argument not top of branch: $branch\n";
    }
    my $branch_base = $1;
    $branch_name = $2;
    if ($branch_base ne $trunk_base) {
	die "Error: Branch and trunk not related: $branch, " . `pwd`;
    }
    # Check branch
    $branch_rev = get_url_revision($branch_url);
    if (!$branch_rev) {
	die "Error: Branch not found: $branch_url\n";
    } elsif ($branch ne $branch_url) {
	# Check for modifications and updates in the branch working copy
	my $result = get_update_modified($branch, 1);
	if ($result) {
	    warn_or_die($opt_n, "Branch working copy $result: $branch\n");
	}
    }
    # Check trunk
    $trunk_rev = get_url_revision($trunk_url);
    if (!$trunk_rev) {
	die "Error: Trunk URL not found\n";
    }
    my $result = get_update_modified(cwd(), !$opt_f);
    if ($result) {
	die "Error: Trunk working copy $result: " . `pwd`;
    }
}

# Handle the -i and -p options, if specified.
sub handle_opt_ip {
    if ($opt_i) {
	if ($opt_n) {
	    print "Would mark branch $branch_name merged up to revision " .
		"$opt_i\n";
	} else {
	    set_merged_up(cwd(), $opt_i, $branch_name);
	    print "Set branch $branch_name merged up to revision $opt_i\n";
	}
	exit 0;
    } elsif ($opt_p) {
	my $merged = get_merged_up(cwd(), $branch_name) ||
	    "Branch $branch_name is not merged up";
	print "$merged\n";
	exit 0;
    }
}

# Determine when the branch was last merged up to the trunk, and exit
# if the trunk is already up to date.
sub check_merged {
    $merged = get_merged_up(cwd(), $branch_name);
    if (!$merged) {
	# Branch not merged, use the initial branch revision instead
	$merged = get_branch_first_revision($branch, $branch_rev);
    }
    if ($branch_rev == $merged) {
	print "Trunk working copy is up to date with branch revision " .
	    "$branch_rev\n";
	exit 0;
    }
}

# Checks that the branch is refreshed up to date with the trunk
sub check_refreshed {
    $refreshed = get_refreshed($branch, $branch_name, $branch_rev);
    # $refreshed could be greater than $trunk_rev if the trunk was not
    # changed since the branch was created.
    if ($refreshed > $trunk_rev) {
	$refreshed = $trunk_rev;
    } elsif ($trunk_rev > $refreshed) {
	warn_or_die($opt_n,
		    "Branch needs to be refreshed before merging up\n" .
		    "  Current trunk revision: $trunk_rev\n" .
		    "  Branch refreshed to trunk revision: $refreshed\n");
    }
}

# Checks the log for moves, printing out what it finds and exiting if
# needed.
sub check_moves {
    # The revision numbers specified when printing the log include the
    # log for changes specified by the first number, not the changes
    # made since that number as in printing the diffs.
    my $log_start = $merged + 1;
    $log_command = "$svn log -v -r $log_start:$branch_rev " . escape($branch);
    @log_contents = command($log_command);
    my $moves = get_moves($branch_url, @log_contents);
    my $where = "Branch";
    if (!$moves) {
	$moves = get_moves($trunk_url, @log_contents);
	if (!$moves) {
	    return;
	}
	$where = "Trunk";
    }
    warn "Warning: $where changes contain moves:\n$moves";
}

# Performs the merge, and prints the log and diffs as needed.
sub merge {
    my $old = cwd() . "\@$refreshed";
    my $new = escape($branch) . "\@$branch_rev";
    my $merge_command;
    if (!$opt_n) {
	$merge_command = "$svn merge --accept postpone $old $new";
    } elsif ($trunk_rev > $refreshed) {
	# The branch is not up-to-date with the latest trunk revision,
	# so use diff so that we don't attempt to merge with the current
	# trunk
	$merge_command = "$svn diff --summarize --old $trunk_url\@$refreshed" .
	    " --new $branch_url\@$branch_rev | " .
	    "sed -e 's|$trunk_url/||'";
    } else {
	$merge_command = "$svn merge --dry-run $old $new";
    }
    print "$merge_command\n";
    print command($merge_command);
    if (!$opt_n) {
	# Update meta data
	set_merged_up(cwd(), $branch_rev, $branch_name);
    }
    # Print log and diffs in verbose mode
    if ($opt_v) {
	print "------------------------------------" .
	    "------------------------------------\n";
	print "$log_command\n";
	print @log_contents;
	my $diff_command = "$svn diff --notice-ancestry --old $old --new $new";
	print "$diff_command\n";
	print command($diff_command);
    }
    if (!$opt_n) {
	# Print what happened
	print "Merged up to trunk working copy from revision $branch_rev " .
	    "of branch $branch_name\n";
    }
    exit 0;
}
