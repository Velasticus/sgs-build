#! /usr/bin/env perl
# testsvnmergeup -- Tests for the svnmergeup commmand 

################
# Use
################

use strict;
use warnings;

# The directory containing the current program
my $program_dir = head(absolute($0));

require "$program_dir/testutil.pl";

################
# Variables
################

# Import variables from testutil.pl
our($trunk, $escaped_trunk, $trunk_copy, $escaped_trunk_copy,
    $wrong_trunk, $escaped_wrong_trunk, $branch, $escaped_branch,
    $branch_copy, $escaped_branch_copy, $branch2, $escaped_branch2);

# The directory containing the svn branch utilities under test.
my $install_dir = escape($ENV{"INSTALL_DIR"} || head($program_dir) . "/src");

# The pathname of the svnmergeup command
my $svnmergeup = "$install_dir/svnmergeup";

# The URL for $trunk
my $trunk_url = get_repository_url($trunk);

# The URL for $wrong_trunk
my $wrong_trunk_url = get_repository_url($wrong_trunk);

# The URL for $branch and $branch_copy
my $branch_url = get_repository_url($branch);

# The URL for $branch2
my $branch2_url = get_repository_url($branch2);

# The 'SCHEME://HOST/REPOSITORY' portion of the trunk (or branch) URL
my ($repository) = $trunk_url =~ m!^((file|svn)://[^/]*/[^/]+)/.*$!;

# The 'SCHEME://HOST' portion of the trunk (or branch) URL
my ($svnserver) = $repository =~ m!^((file|svn)://[^/]*)/.*$!;

# The svnmergeup usage message
my $svnmergeup_usage = "Usage: $svnmergeup [-fhnpv] [-i rev] BRANCH_URL_OR_DIRECTORY
Options:
  -f                    : Force
  -h                    : Help
  -i rev                : Initialize merged up revision
  -p                    : Print last merged up revision
  -n                    : Dry run
  -v                    : Verbose
Environment variables:
  SVNDIR                : Directory containing Subversion executables";

################
# Subroutines
################

# Converts the argument to an absolute pathname
sub absolute {
    my ($result) = @_;
    # Remove leading "./"
    if ($result =~ m!^./(.*)$!) {
	$result = $1;
    }
    # Prepend current directory and "/" if relative
    if ($result !~ m!^/!) {
	chomp(my $cwd = `pwd`);
	$result = $cwd . "/" . $result;
    }
    return $result;
}

# Returns the head of a pathname, stripping of the last '/' and
# following file name
sub head {
    my ($pathname) = @_;
    if ($pathname =~ m!^(.*)/[^/]*$!) {
	return $1;
    }
    die "Couldn't compute head: " . $pathname . "\n";
}

################
# Initialize
################

check_arguments();

################
# Tests
################

####
# Check arguments
####

test("No arguments",
     "cd $escaped_trunk",
     $svnmergeup,
     check_diff_fail($svnmergeup_usage));

test("Two arguments",
     "cd $escaped_trunk",
     "$svnmergeup a b",
     check_diff_fail($svnmergeup_usage));

test("Unknown option",
     "cd $escaped_trunk",
     "$svnmergeup -w $escaped_branch",
     check_diff_fail("Unknown option: w\n$svnmergeup_usage"));

test("-i with no value",
     "cd $escaped_trunk",
     "$svnmergeup -i $escaped_branch",
     check_diff_fail("Error: Bad value for -i: $branch\n$svnmergeup_usage"));

test("-i with bad value",
     "cd $escaped_trunk",
     "$svnmergeup -i abc $escaped_branch",
     check_diff_fail("Error: Bad value for -i: abc\n$svnmergeup_usage"));

test("-p option",
     "cd $escaped_trunk",
     "$svnmergeup -p $escaped_branch",
     check_pass());

test("-i with -p",
     "cd $escaped_trunk",
     "$svnmergeup -i 3 -p $escaped_branch",
     check_diff_fail("Error: -p not permitted with -i\n$svnmergeup_usage"));

test("-h option",
     "cd $escaped_trunk",
     "$svnmergeup -h",
     check_pass());

####
# Check current directory
####

test("Run in /",
     "cd /",
     "$svnmergeup -n $escaped_branch",
     check_diff_fail("Error: Current directory not top of trunk: /"));

test("Run in branch",
     "cd $escaped_branch",
     "$svnmergeup -n $escaped_branch",
     check_diff_fail("Error: Current directory not top of trunk: $branch"));

test("Run in subdirectory of branch",
     "cd $escaped_branch/dir",
     "$svnmergeup -n $escaped_branch",
     check_diff_fail("Error: Current directory not top of trunk: $branch/dir"));

####
# Check branch argument as directory
####

test("Argument is /tmp",
     "cd $escaped_trunk",
     "$svnmergeup -n /tmp",
     check_diff_fail("Error: Argument not top of branch: /tmp"));

test("Argument is trunk",
     "cd $escaped_trunk",
     "$svnmergeup -n $escaped_trunk",
     check_diff_fail("Error: Argument not top of branch: $trunk"));

test("Argument is subdirectory of branch",
     "cd $escaped_trunk",
     "$svnmergeup -n $escaped_branch/dir",
     check_diff_fail("Error: Argument not top of branch: $branch/dir"));

test("Argument is wrong branch",
     "cd $escaped_wrong_trunk",
     "$svnmergeup -n $escaped_branch",
     check_diff_fail("Error: Branch and trunk not related: $branch, $wrong_trunk"));

####
# Check branch argument as URL
####

test("Argument is HTTP URL",
     "cd $escaped_trunk",
     "$svnmergeup -n http://www.sun.com",
     check_diff_fail("Error: Argument not top of branch: http://www.sun.com"));

test("Argument is SVN URL with unknown server",
     "cd $escaped_trunk",
     "$svnmergeup -n svn://whatserveristhis/foo",
     check_diff_fail(
	 "Error: Argument not top of branch: svn://whatserveristhis/foo"));

test("Argument is SVN URL with unknown repository",
     "cd $escaped_trunk",
     "$svnmergeup -n svn://$svnserver/whatrepositoryisthis/foo",
     check_diff_fail("Error: Argument not top of branch: " .
		     "svn://$svnserver/whatrepositoryisthis/foo"));

test("Argument is trunk URL",
     "cd $escaped_trunk",
     "$svnmergeup -n $trunk_url",
     check_diff_fail("Error: Argument not top of branch: $trunk_url"));

test("Argument is non-existent subdirectory of branch URL",
     "cd $escaped_trunk",
     "$svnmergeup -n $branch_url/whatisthissubdirectory",
     check_diff_fail("Error: Argument not top of branch: " .
		     "$branch_url/whatisthissubdirectory"));

test("Argument is subdirectory of branch URL",
     "cd $escaped_trunk",
     "$svnmergeup -n $branch_url/dir",
     check_diff_fail("Error: Argument not top of branch: $branch_url/dir"));

test("Argument is wrong branch URL",
     "cd $escaped_wrong_trunk",
     "$svnmergeup -n $branch_url",
     check_diff_fail(
	 "Error: Branch and trunk not related: $branch_url, $wrong_trunk"));

{
    my $name = "Argument is non-existent branch";
    my ($base) = $branch_url =~ m!(.*/branches)/[^/]+!;
    my $unknown_branch = "$base/whatisthisbranch";
    test($name,
	 "cd $escaped_trunk",
	 "$svnmergeup -n $unknown_branch",
	 check_diff_fail("Error: Branch not found: $unknown_branch"));
}

{
    my $name = "Argument is non-existent branch ending with a slash";
    my ($base) = $branch_url =~ m!(.*/branches)/[^/]+!;
    my $unknown_branch = "$base/whatisthisbranch/";
    test($name,
	 "cd $escaped_trunk",
	 "$svnmergeup -n $unknown_branch",
	 check_diff_fail("Error: Branch not found: $unknown_branch"));
}

####
# Check modified and not updated
####

test("Branch directory modified",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "cd $escaped_trunk"),
     "$svnmergeup -n $escaped_branch",
     check_diff_pass("Warning: Branch working copy is modified: $branch"),
     "svn revert -R $escaped_branch");

test("Trunk directory modified",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "date > file.txt"),
     "$svnmergeup -n $escaped_branch",
     check_diff_fail("Error: Trunk working copy is modified: $trunk"),
     "svn revert -R .");

test("Force trunk directory modified",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "date > file.txt"),
     "$svnmergeup -fn $escaped_branch",
     check_pass(),
     "svn revert -R .");

test("Branch directory needs updating",
     join(" &&\n",
	  "cd $escaped_branch_copy",
	  "svn update",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit file2.txt -m \"Modify file2.txt\"",
	  "cd $escaped_trunk"),
     "$svnmergeup -n $escaped_branch_copy",
     check_diff_pass("Warning: Branch working copy needs to be updated: " .
		     $branch_copy));

test("Trunk directory needs updating",
     join(" &&\n",
	  "cd $escaped_trunk_copy",
	  "svn update",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit file.txt -m \"Modify file.txt\"",
	  "cd $escaped_trunk_copy"),
     "$svnmergeup -n $escaped_branch",
     check_diff_fail(
	 "Error: Trunk working copy needs to be updated: $trunk_copy"),
     join(" &&\n",
	  "cd $escaped_branch",
	  "$install_dir/svnrefresh",
	  "svn update",
	  "svn commit -m \"Refresh\""));

test("Trunk modified and needs updating",
     join(" &&\n",
	  "cd $escaped_trunk_copy",
	  "svn update",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit -m ''",
	  "cd $escaped_trunk_copy",
	  "date > file.txt"),
     "$svnmergeup -n $escaped_branch",
     check_diff_fail(
	 "Error: Trunk working copy needs to be updated and is modified: " .
	 $trunk_copy),
     join(" &&\n",
	  "svn revert -R $escaped_trunk_copy",
	  "cd $escaped_branch",
	  "$install_dir/svnrefresh",
	  "svn commit -m ''"));

test("Branch modified and needs updating",
     join(" &&\n",
	  "cd $escaped_branch_copy",
	  "svn update",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit -m ''",
	  "date > $escaped_branch_copy/file2.txt",
	  "cd $escaped_trunk"),
     "$svnmergeup -n $escaped_branch_copy",
     check_diff_pass(
	 "Warning: Branch working copy needs to be updated and is modified: " .
	 $branch_copy),
     "svn revert -R $escaped_branch_copy");

####
# Check not refreshed
####

test("Merge without refresh",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit -m ''",
	  "refreshed=`$install_dir/svnrefresh -p`",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit -m ''",
	  "trunkrev=`" . escape($program_dir) . "/svnrev`"),
     "$svnmergeup -n $escaped_branch",
     check_diff_pass(
	 "Warning: Branch needs to be refreshed before merging up\n" .
	 "  Current trunk revision: \$trunkrev\n" .
	 "  Branch refreshed to trunk revision: \$refreshed"),
     join(" &&\n",
	  "cd $escaped_branch",
	  "$install_dir/svnrefresh",
	  "svn update",
	  "svn commit -m ''"));

####
# Check merging up changes
####

test("Merge change to file2.txt into working copy",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit file2.txt -m \"Modify file2.txt\"",
	  "cd $escaped_trunk"),
     "$svnmergeup $escaped_branch",
     join(" &&\n",
	  check_pass(),
	  check_compare(escape("$trunk/file2.txt"),
			escape("$branch/file2.txt"))),
     join(" &&\n",
	  "svn update",
	  "svn commit -m \"Merge branch\"",
	  "cd $escaped_branch",
	  "$install_dir/svnrefresh",
	  "svn update",
	  "svn commit -m \"Refresh\""));

####
# Check moves
####

{
    my $name = "Merge moves without -f";
    my $time = time();
    test($name,
	 join(" &&\n",
	      "cd $escaped_branch",
	      "echo \"foo\" > file-a-$time",
	      "svn add file-a-$time",
	      "svn commit -m ''",
	      "cd $escaped_trunk",
	      "$svnmergeup $branch_url",
	      "svn commit -m \"Merge up\"",
	      "cd $escaped_branch",
	      "$install_dir/svnrefresh",
	      "svn mv file-a-$time file-b-$time",
	      "svn update",
	      "svn commit -m ''",
	      "cd $escaped_trunk"),
	 "$svnmergeup $branch_url",
	 check_diff_pass(
	     "Warning: Branch changes contain moves:\n" .
	     "  svn mv file-a-$time file-b-$time"),
	 join(" &&\n",
	      "svn commit -m \"Merge up move\"",
	      "cd $escaped_branch",
	      "$install_dir/svnrefresh",
	      "svn commit -m ''"));
}

####
# Miscellaneous
####

{
    my $name = "Modify trunk between merge up and commit";
    my $time = time();
    test($name,
	 join(" &&\n",
	      "cd $escaped_branch",
	      "date > file2.txt",
	      "svn commit -m ''",
	      "cd $escaped_trunk_copy",
	      "svn update",
	      "cd $escaped_trunk"),
	 join(" &&\n",
	      "$svnmergeup $branch_url",
	      "cd $escaped_trunk_copy",
	      "echo aaa > file-$time",
	      "svn add file-$time",
	      "svn commit -m ''",
	      "cd $escaped_trunk",
	      "svn update",
	      "svn commit -m ''"),
	 join(" &&\n",
	      check_pass(),
	      check_compare("file-$time", escape("$trunk_copy/file-$time"))),
	 join(" &&\n",
	      "cd $escaped_branch",
	      "$install_dir/svnrefresh",
	      "svn update",
	      "svn commit -m ''"));
}

####
# Open issues
####

# Allow URL arguments to end in a slash or not

# Track down problem with merging where merge says branch is not up to
# date, but refresh says it is!

# Track down problem where merging with trailing slash in branch URL
# fails

# What happens if the name of a branch is changed?

####
# Print results
####

print_results();
