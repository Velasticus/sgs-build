<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

    This file is a modified version of the file sun_checks.xml, from
    version 5.0 of the CheckStyle distribution.

    Please keep this file up-to-date with newer versions of CheckStyle,
    and comment modifications made to account our local style
    conventions with 'DARKSTAR'.

  -->

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage"/>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile"/>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>
    
    <!-- DARKSTAR: Don't enforce file length checks.  Files
	     should be whatever length they need to be. -->
    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <!-- <module name="FileLength"/> -->
    
    <!-- DARKSTAR: Permit using tabs -->
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <!-- <module name="FileTabCharacter"/> -->

    <!-- DARKSTAR: Don't complain about trailing spaces -->
    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!-- <module name="RegexpSingleline">
       <property name="format" value="\s+$"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Line has trailing spaces."/>
    </module> -->

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
	<!-- DARKSTAR: For all javadoc checks, only require javadoc
	     comments for protected or public items.  Also make these
	     items warnings, since some missing are OK because they get
	     inherited. -->
        <module name="JavadocMethod">
	    <property name="scope" value="protected"/>
	    <property name="severity" value="warning"/>
	    <!-- DARKSTAR: Allow documentation for runtime
		 exceptions, which are all undeclared -->
	    <property name="allowUndeclaredRTE" value="true"/>
	    <!-- DARKSTAR: Allow documentation for subclasses of
		 declared exceptions -->
	    <property name="allowThrowsTagsForSubclasses" value="true"/>
	</module>
        <module name="JavadocType">
	    <property name="scope" value="protected"/>
	    <property name="severity" value="warning"/>
	</module>
        <module name="JavadocVariable">
	    <property name="scope" value="protected"/>
	    <property name="severity" value="warning"/>
	</module>
        <module name="JavadocStyle">
	    <property name="scope" value="protected"/>
	    <property name="severity" value="warning"/>
	    <!-- DARKSTAR: Require documentation text -->
	    <property name="checkEmptyJavadoc" value="true"/>
	</module>


        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <module name="ConstantName">
	    <!-- DARKSTAR: Permit constant names to use the standard
		 variable convention.  Some final fields store values
		 that cannot be modified, but otherwise feel more like
		 standard fields, and so use the mixed case naming
		 convention. -->
	    <property
		 name="format"
		 value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|[a-z][a-zA-Z0-9]*)$"/>
	</module>
        <module name="LocalFinalVariableName">
	    <!-- DARKSTAR: As with constant names, permit final
		 variable names to use the standard variable convention
		 -->
	    <property
		 name="format"
		 value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|[a-z][a-zA-Z0-9]*)$"/>
	</module>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->

        <!-- Following interprets the header file as regular expressions. -->
        <!-- <module name="RegexpHeader"/>                                -->


	<!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports">
	    <!-- DARKSTAR: Make unused imports warnings by default
		 since they can be false positives, in particular when
		 the class name is only referred to in javadoc.  You can
		 suppress these warnings altogether by setting the
		 checkstyle.unusedImports property to ignore. -->
	    <property name="severity"
		      value="${checkstyle.unusedImports}"
		      default="warning"/>
	</module>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
	<!-- DARKSTAR: Allow 90 characters per line to ease cramped
	     coding style.  Also, allow lines longer than 90
	     characters if and only if
	     they are comment lines and consist of a single,
	     unbroken word.  This allows the inclusion of long
	     class or property names in javadoc comments without
	     tripping the LineLength alarm. -->
        <module name="LineLength">
	  <property name="max" value="90"/>
	  <property name="ignorePattern" value="^ \*\s*\S+$"/>
	</module>
	<!-- DARKSTAR: Don't enforce method length checks. -->
        <!-- <module name="MethodLength"/>> -->
        <module name="ParameterNumber">
	    <!-- DARKSTAR: Make this a warning since some methods
		 really do need a large number of parameters -->
	    <property name="severity" value="warning"/>
	</module>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad">
	    <!-- DARKSTAR: Require an empty space when a for
		 statement has a missing parameter -->
	    <property name="option" value="space"/>
	</module>
        <module name="GenericWhitespace"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
	    <!-- DARKSTAR: Allow whitespace after the open curly
		 brace of an array initialization -->
	    <property name="tokens"
		      value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
			     UNARY_PLUS"/>
	</module>
        <module name="NoWhitespaceBefore"/>
        <module name="OperatorWrap">
	    <!-- DARKSTAR: Remove requirements for the triglyph question
		 mark and colon, as well as the plus sign used for
		 string concatenation, to be at the beginning or end of
		 the line.  There doesn't seem to be agreement about the
		 formatting style here. -->
	    <property name="option" value="eol"/>
	    <property name="tokens"
		      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT,
			     LAND, LE, LITERAL_INSTANCEOF, LOR, LT,
			     MINUS, MOD, NOT_EQUAL, SL, SR,
			     STAR"/>
	</module>
	<!-- DARKSTAR: Require the 'new' operator to never appear at the end
	     of a line -->
	<module name="RegexpSinglelineJava">
	  <property name="format" value="new\s*$"/>
	  <property name="ignoreComments" value="true"/>
	  <property name="message" 
		    value="new operator should not appear at end of line"/>
	</module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround"/>


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <module name="RedundantModifier"/>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
	    <!-- DARKSTAR: Permit empty catch blocks, in particular
		 for throwing away IOExceptions when closing a stream
		 -->
	    <property name="tokens"
		      value="LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
			     LITERAL_IF, LITERAL_FOR, LITERAL_TRY,
			     LITERAL_WHILE, INSTANCE_INIT,
			     STATIC_INIT"/>
	</module>
	<!-- DARKSTAR: We would like to require the left curly brace of
	     a block to appear on the first line if it will fit,
	     otherwise at the start of the next line.  But Checkstyle
	     currently does not understand that attributes should not be
	     included in this computation, so disable this check for
	     now.  tjb@sun.com (09/22/2008) -->
	<!--
        <module name="LeftCurly">
	    <property name="option" value="nlow"/>
	</module>
	-->
        <module name="NeedBraces"/>
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
	<!-- DARKSTAR: Permit inline conditionals -->
        <!-- <module name="AvoidInlineConditionals"/> -->
        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
	<!-- DARKSTAR: Permit hidden fields.  It's too hard to
	     explain where they should be allowed -->
        <!-- <module name="HiddenField"> -->
        <module name="IllegalInstantiation"/>
        <module name="InnerAssignment"/>
	<!-- DARKSTAR: Not all "magic numbers" are bad, and it's hard
             to distinguish good from bad, so disable this -->
        <!-- <module name="MagicNumber"> -->
        <module name="MissingSwitchDefault"/>
        <module name="RedundantThrows"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
	<!-- DARKSTAR: This check seems too simple to be helpful -->
        <!-- <module name="DesignForExtension"/> -->

	<!-- DARKSTAR: Don't require a class with all private
             constructors to be final -->
        <module name="FinalClass">
	    <property name="severity" value="warning"/>
	</module>
        <module name="HideUtilityClassConstructor"/>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier">
	    <!-- DARKSTAR: Permit package and protected access for
		 non-final fields -->
	    <property name="packageAllowed" value="true"/>
	    <property name="protectedAllowed" value="true"/>
	</module>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle"/>
	<!-- DARKSTAR: Don't require method, constructor, or catch
             block parameters to be final -->
        <!-- <module name="FinalParameters"/> -->
	<!-- DARKSTAR: Don't flag TODO: comments.  Our Hudson build
	     infrastructure can't distinguish particular levels of
	     Checkstyle notifications as not errors, so just disable
	     these, which should not be considered errors. -->
        <!-- <module name="TodoComment"/> -->
        <module name="UpperEll"/>

	<!-- DARKSTAR: Configured to enable suppression filters below -->
	<module name="FileContentsHolder"/>

    </module>

    <!-- DARKSTAR: Enable the default multiline in-file suppression comments.
	 Checkstyle audits will be disabled between comment lines containing
	 the phrases CHECKSTYLE: OFF and CHECKSTYLE: ON respectively -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE\: OFF"/>
      <property name="onCommentFormat" value="CHECKSTYLE\: ON"/>
      <property name="checkFormat" value=".*"/>
    </module>

    <!-- DARKSTAR: Enable multiline in-file suppression comments to disable
	 a set of Checkstyle audit types. -->
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE\: ([\w\|]+)+ OFF"/>
      <property name="onCommentFormat" value="CHECKSTYLE\: ([\w\|]+)+ ON"/>
      <property name="checkFormat" value="$1"/>
    </module>

    <!-- DARKSTAR: Enable single line in-file suppression comments to
	 disable all audits -->
    <module name="SuppressWithNearbyCommentFilter">
      <property name="commentFormat" value="CHECKSTYLE IGNORE NEXT LINE"/>
      <property name="checkFormat" value=".*"/>
      <property name="influenceFormat" value="1"/>
    </module>

</module>
