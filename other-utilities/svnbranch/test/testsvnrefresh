#! /usr/bin/env perl
# testsvnrefresh -- Tests for the svnrefresh commmand 

################
# Use
################

use strict;
use warnings;

# The directory containing the current program
my $program_dir = head(absolute($0));

require "$program_dir/testutil.pl";

################
# Variables
################

# Import variables from testutil.pl
our($trunk, $escaped_trunk, $trunk_copy, $escaped_trunk_copy,
    $wrong_trunk, $escaped_wrong_trunk, $branch, $escaped_branch,
    $branch_copy, $escaped_branch_copy, $branch2, $escaped_branch2);

# The directory containing the svn branch utilities under test.
my $install_dir = escape($ENV{"INSTALL_DIR"} || head($program_dir) . "/src");

# The pathname of the svnrefresh command
my $svnrefresh = "$install_dir/svnrefresh";

# The URL for $trunk
my $trunk_url = get_repository_url($trunk);

# The URL for $wrong_trunk
my $wrong_trunk_url = get_repository_url($wrong_trunk);

# The URL for $branch and $branch_copy
my $branch_url = get_repository_url($branch);

# The URL for $branch2
my $branch2_url = get_repository_url($branch2);

# The 'SCHEME://HOST/REPOSITORY' portion of the trunk (or branch) URL
my ($repository) = $trunk_url =~ m!^((file|svn)://[^/]*/[^/]+)/.*$!;

# The 'SCHEME://HOST' portion of the trunk (or branch) URL
my ($svnserver) = $repository =~ m!^((file|svn)://[^/]*)/.*$!;

# The svnrefresh usage message
my $svnrefresh_usage = "Usage: $svnrefresh [-fhnpv] [-i rev] [TRUNK_URL_OR_DIRECTORY]
Options:
  -f                    : Force
  -h                    : Help
  -i rev                : Initialize refreshed revision
  -p                    : Print last refreshed revision
  -n                    : Dry run
  -v                    : Verbose
Environment variables:
  SVNDIR                : Directory containing Subversion executables";

################
# Subroutines
################

# Converts the argument to an absolute pathname
sub absolute {
    my ($result) = @_;
    # Remove leading "./"
    if ($result =~ m!^./(.*)$!) {
	$result = $1;
    }
    # Prepend current directory and "/" if relative
    if ($result !~ m!^/!) {
	chomp(my $cwd = `pwd`);
	$result = $cwd . "/" . $result;
    }
    return $result;
}

# Returns the head of a pathname, stripping of the last '/' and
# following file name
sub head {
    my ($pathname) = @_;
    if ($pathname =~ m!^(.*)/[^/]*$!) {
	return $1;
    }
    die "Couldn't compute head: " . $pathname . "\n";
}

################
# Initialize
################

check_arguments();

################
# Tests
################

####
# Check arguments
####

test("Two arguments",
     "cd $escaped_branch",
     "$svnrefresh a b",
     check_diff_fail($svnrefresh_usage));

test("Unknown option",
     "cd $escaped_branch",
     "$svnrefresh -z",
     check_diff_fail("Unknown option: z\n$svnrefresh_usage"));

test("-i with no value",
     "cd $escaped_branch",
     "$svnrefresh -i",
     check_diff_fail("$svnrefresh_usage"));

test("-i with bad value",
     "cd $escaped_branch",
     "$svnrefresh -i abc",
     check_diff_fail("Error: Bad value for -i: abc\n$svnrefresh_usage"));

test("-p option",
     "cd $escaped_branch",
     "$svnrefresh -p",
     check_pass());

test("-i with -p",
     "cd $escaped_branch",
     "$svnrefresh -i 3 -p",
     check_diff_fail("Error: -p not permitted with -i\n$svnrefresh_usage"));

test("-h option",
     "cd $escaped_branch",
     "$svnrefresh -h",
     check_pass());

####
# Check current directory
####

test("Run in /",
     "cd /",
     "$svnrefresh -n",
     check_diff_fail("Error: Current directory not top of branch: /"));

test("Run in trunk",
     "cd $escaped_trunk",
     "$svnrefresh -n",
     check_diff_fail("Error: Current directory not top of branch: $trunk"));

test("Run in subdirectory of trunk",
     "cd $escaped_trunk/dir",
     "$svnrefresh -n",
     check_diff_fail("Error: Current directory not top of branch: $trunk/dir"));

####
# Check trunk argument as directory
####

test("Argument is /tmp",
     "cd $escaped_branch",
     "$svnrefresh -n /tmp",
     check_diff_fail("Error: Argument not top of trunk: /tmp"));

test("Argument is branch",
     "cd $escaped_branch",
     "$svnrefresh -n $escaped_branch",
     check_diff_fail("Error: Argument not top of trunk: $branch"));

test("Argument is subdirectory of trunk",
     "cd $escaped_branch",
     "$svnrefresh -n $escaped_trunk/dir",
     check_diff_fail("Error: Argument not top of trunk: $trunk/dir"));

test("Argument is wrong trunk",
     "cd $escaped_branch",
     "$svnrefresh -n $escaped_wrong_trunk",
     check_diff_fail("Error: Branch and trunk not related: $branch, $wrong_trunk"));

####
# Check trunk argument as URL
####

test("Argument is HTTP URL",
     "cd $escaped_branch",
     "$svnrefresh -n http://www.sun.com",
     check_diff_fail("Error: Argument not top of trunk: http://www.sun.com"));

test("Argument is SVN URL with unknown server",
     "cd $escaped_branch",
     "$svnrefresh -n svn://whatserveristhis/foo",
     check_diff_fail(
	 "Error: Argument not top of trunk: svn://whatserveristhis/foo"));

test("Argument is SVN URL with unknown repository",
     "cd $escaped_branch",
     "$svnrefresh -n svn://$svnserver/whatrepositoryisthis/foo",
     check_diff_fail("Error: Argument not top of trunk: " .
		"svn://$svnserver/whatrepositoryisthis/foo"));

test("Argument is branch URL",
     "cd $escaped_branch",
     "$svnrefresh -n $branch_url",
     check_diff_fail("Error: Argument not top of trunk: $branch_url"));

test("Argument is non-existent subdirectory of trunk URL",
     "cd $escaped_branch",
     "$svnrefresh -n $trunk_url/whatisthissubdirectory",
     check_diff_fail("Error: Argument not top of trunk: " .
		"$trunk_url/whatisthissubdirectory"));

test("Argument is subdirectory of trunk URL",
     "cd $escaped_branch",
     "$svnrefresh -n $trunk_url/dir",
     check_diff_fail("Error: Argument not top of trunk: $trunk_url/dir"));

test("Argument is wrong trunk URL",
     "cd $escaped_branch",
     "$svnrefresh -n $wrong_trunk_url",
     check_diff_fail(
	 "Error: Branch and trunk not related: $branch, $wrong_trunk_url"));

####
# Check modified and not updated
####

test("Trunk directory modified",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "cd $escaped_branch"),
     "$svnrefresh -n $escaped_trunk",
     check_diff_fail("Error: Trunk working copy is modified: $trunk"),
     "svn revert -R $escaped_trunk");

test("Branch directory modified",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt"),
     "$svnrefresh -n",
     check_diff_pass("Warning: Branch working copy is modified: $branch"),
     "svn revert -R .");

test("Force branch directory modified",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt"),
     "$svnrefresh -f",
     check_pass(),
     "svn revert -R .");

test("Trunk directory needs updating",
     join(" &&\n",
	  "cd $escaped_trunk_copy",
	  "svn update",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit file.txt -m \"Modify file.txt\"",
	  "cd $escaped_branch"),
     "$svnrefresh -n $escaped_trunk_copy",
     check_diff_fail(
	 "Error: Trunk working copy needs to be updated: $trunk_copy"),
     join(" &&\n",
	  $svnrefresh,
	  "svn commit -m \"Refresh\""));

test("Branch directory needs updating",
     join(" &&\n",
	  "cd $escaped_branch_copy",
	  "svn update",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit file2.txt -m \"Modify file2.txt\"",
	  "svn update",
	  "cd $escaped_branch_copy"),
     "$svnrefresh -n",
     check_diff_pass("Warning: Branch working copy needs to be updated: " .
		     $branch_copy));

test("Trunk modified and needs updating",
     join(" &&\n",
	  "cd $escaped_trunk_copy",
	  "svn update",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit -m ''",
	  "date > $escaped_trunk_copy/file.txt",
	  "cd $escaped_branch"),
     "$svnrefresh -n $escaped_trunk_copy",
     check_diff_fail(
	 "Error: Trunk working copy needs to be updated and is modified: " .
	 $trunk_copy),
     join(" &&\n",
	  "svn revert -R $escaped_trunk_copy",
	  $svnrefresh,
	  "svn commit -m ''"));

test("Branch modified and needs updating",
     join(" &&\n",
	  "cd $escaped_branch_copy",
	  "svn update",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit -m ''",
	  "svn update",
	  "date > $escaped_branch_copy/file2.txt",
	  "cd $escaped_branch_copy"),
     "$svnrefresh -n",
     check_diff_pass(
	 "Warning: Branch working copy needs to be updated and is modified: " .
	 $branch_copy),
     "svn revert -R $escaped_branch_copy");

####
# Check refreshing changes
####

test("Refresh change to file.txt in working copy",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit file.txt -m \"Modify file.txt\"",
	  "cd $escaped_branch"),
     "$svnrefresh $escaped_trunk",
     join(" &&\n",
	  check_pass(),
	  check_compare(escape("$trunk/file.txt"),
			escape("$branch/file.txt"))),
     "svn commit -m \"Refresh\"");

test("Refresh after merging",
     join(" &&\n",
	  "cd $escaped_branch",
	  "date > file2.txt",
	  "svn commit -m ''",
	  "svn update",
	  "cd $escaped_trunk",
	  "svn update",
	  "$install_dir/svnmergeup $branch_url",
	  "date > file.txt",
	  "svn commit -m ''",
	  "svn update",
	  "cd $escaped_branch",
	  "$svnrefresh",
	  "svn update",
	  "svn commit -m ''",
	  "cd $escaped_trunk",
	  "date > file.txt",
	  "svn commit -m ''",
	  "svn update",
	  "cd $escaped_branch"),
     "$svnrefresh",
     check_pass(),
     "svn commit -m ''");

####
# Check moves
####

{
    my $name = "Print refresh moves without -f";
    my $time = time();
    test($name,
	 join(" &&\n",
	      "cd $escaped_trunk",
	      "echo \"foo\" > file-a-$time",
	      "svn add file-a-$time",
	      "svn commit -m \"Add new file\"",
	      "cd $escaped_branch",
	      "$svnrefresh",
	      "svn commit -m \"Refresh\"",
	      "cd $escaped_trunk",
	      "svn mv file-a-$time file-b-$time",
	      "svn commit -m \"Move new file\"",
	      "cd $escaped_branch"),
	 "$svnrefresh -n",
	 check_diff_pass(
	     "Warning: Trunk changes contain moves:\n" .
	     "  svn mv file-a-$time file-b-$time"),
	 join(" &&\n",
	      "$svnrefresh -f",
	      "svn commit -m \"Refresh move\""));
}

{
    my $name = "Refresh moves with -f";
    my $time = time();
    test($name,
	 join(" &&\n",
	      "cd $escaped_trunk",
	      "echo \"foo\" > file-a-$time",
	      "svn add file-a-$time",
	      "svn commit -m \"Add new file\"",
	      "cd $escaped_branch",
	      "$svnrefresh",
	      "svn commit -m \"Refresh\"",
	      "cd $escaped_trunk",
	      "svn mv file-a-$time file-b-$time",
	      "svn commit -m \"Move new file\"",
	      "cd $escaped_branch"),
	 "$svnrefresh -f",
	 check_diff_pass(
	     "Warning: Trunk changes contain moves:\n" .
	     "  svn mv file-a-$time file-b-$time"),
	 "svn commit -m \"Refresh move\"");
}

{
    my $name = "Move in branch";
    my $time = time();
    test($name,
	 join(" &&\n",
	      # Add file in trunk
	      "cd $escaped_trunk",
	      "echo foo > file-a-$time",
	      "svn add file-a-$time",
	      "svn commit -m ''",
	      # Refresh change to branch
	      "cd $escaped_branch",
	      "$svnrefresh",
	      "svn commit -m ''",
	      "trunk_before=`$svnrefresh -p`",
	      # Move file in branch
	      "svn mv file-a-$time file-b-$time",
	      "svn commit -m ''",
	      # Modify file in trunk
	      "cd $escaped_trunk",
	      "echo bar > file-a-$time",
	      "svn commit -m ''",
	      "cd $escaped_branch"),
	 "$svnrefresh -n",
	 check_diff_pass("Warning: Branch changes contain moves:\n" .
			 "  svn mv file-a-$time file-b-$time"),
	 join(" &&\n",
	      # Refresh modifications to moved file
	      "svn merge --accept mine-full" .
	      " $escaped_trunk/file-a-$time\@\$trunk_before" .
	      " $escaped_trunk/file-a-$time\@HEAD file-b-$time",
	      "$svnrefresh -f",
	      "svn resolved file-a-$time",
	      "svn update",
	      "svn commit -m ''",
	      # Merge up moved file
	      "cd $escaped_trunk",
	      "svn mv file-a-$time file-b-$time",
	      "$install_dir/svnmergeup -f $escaped_branch",
	      "svn resolved file-a-$time file-b-$time",
	      "svn update",
	      "svn commit -m ''",
	      # Refresh branch
	      "cd $escaped_branch",
	      "$svnrefresh -f",
	      "svn commit -m ''"));
}

{
    my $name = "Move directory to subdirectory";
    my $time = time();
    test($name,
	 join(" &&\n",
	      # Create directory and file in trunk
	      "cd $escaped_trunk",
	      "svn mkdir dir1-$time",
	      "touch dir1-$time/file",
	      "svn add dir1-$time/file",
	      "svn commit -m ''",
	      # Refresh to branch
	      "cd $escaped_branch",
	      "$svnrefresh",
	      "svn commit -m ''",
	      # Move to new subdirectory in branch
	      "svn mkdir dir2-$time",
	      "svn mv dir1-$time dir2-$time/",
	      "svn commit -m ''",
	      "svn update",
	      # Merge up to trunk
	      "cd $escaped_trunk",
	      "svn copy $escaped_branch/dir2-$time dir2-$time",
	      "$install_dir/svnmergeup -f $escaped_branch",
	      "svn resolved dir2-$time",
	      "svn update",
	      "svn commit -m ''",
	      "cd $escaped_branch"),
	 "$svnrefresh -f",
	 check_pass(),
	 "svn commit -m ''");
}

####
# Check conflicts
####

test("Force refresh with conflict on modified file",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "echo foo$$ > file.txt",
	  "svn commit file.txt -m \"Modify file.txt\"",
	  "cd $escaped_branch",
	  "echo bar$$ > file.txt"),
     "$svnrefresh -f",
     join(" &&\n",
	  check_pass(),
	  "tail -3 /tmp/stdout$$ | head -2 > /tmp/stdouttail$$",
	  "diff - /tmp/stdouttail$$ <<EOF\n" .
	  "The refresh produced merge conflicts:\n" .
	  "C    file.txt\n" .
	  "EOF"),
     join(" &&\n",
	  "rm -f /tmp/stdouttail$$",
	  "cd $escaped_branch",
	  "cat $escaped_trunk/file.txt > file.txt",
	  "svn resolved file.txt",
	  "svn commit -m \"Refresh\""));

test("Refresh with conflict on committed file",
     join(" &&\n",
	  "cd $escaped_trunk",
	  "echo baz$$ > file.txt",
	  "svn commit file.txt -m \"Modify file.txt\"",
	  "cd $escaped_branch",
	  "echo quux$$ > file.txt",
	  "svn commit -m \"Modify file.txt in branch\""),
     "$svnrefresh",
     join(" &&\n",
	  check_pass(),
	  "tail -3 /tmp/stdout$$ | head -2 > /tmp/stdouttail$$",
	  "diff - /tmp/stdouttail$$ <<EOF\n" .
	  "The refresh produced merge conflicts:\n" .
	  "C    file.txt\n" .
	  "EOF"),
     join(" &&\n",
	  "rm -f /tmp/stdouttail$$",
	  "cd $escaped_branch",
	  "cat $escaped_trunk/file.txt > file.txt",
	  "svn resolved file.txt",
	  "svn update",
	  "svn commit -m \"Refresh\""));

####
# Miscellaneous
####

{
    my $name = "Modify trunk between branch create and commit";
    my $time = time();
    my $escaped_new_branch = $escaped_branch . $time;
    test($name,
	 join(" &&\n",
	      "cd $escaped_trunk",
	      "echo aaa > file.txt",			# Old value
	      "svn commit -m ''",
	      "svn copy . $escaped_new_branch",		# Create branch
	      "echo bbb > file.txt",			# New value
	      "svn commit -m ''",
	      "trunk_rev=`" . escape($program_dir) . "/svnrev`",
	      "cd $escaped_new_branch",
	      "svn commit -m ''"),
	 "$svnrefresh",
	 join(" &&\n",
	      check_pass(),
	      # Should equal .merge-right value
	      check_compare("file.txt.merge-right.r\$trunk_rev",
			    escape("$trunk/file.txt"))),
	 join(" &&\n",
	      "cat $escaped_trunk/file.txt > file.txt",
	      "svn resolved file.txt",
	      "svn commit -m ''",
	      "cd $escaped_branch",
	      "$svnrefresh",
	      "svn commit -m ''"))
}

####
# Open issues
####

# What if a file is created new in the branch?  Oh, this only affects
# merging, right?

# What if a file is created both in the branch and the trunk?

# Allow URL arguments to end in a slash or not

####
# Print results
####

print_results();
